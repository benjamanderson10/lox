{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\parser.rs","byte_start":396,"byte_end":431,"line_start":14,"line_end":14,"column_start":31,"column_end":66,"is_primary":true,"text":[{"text":"        self.expressions.push(Parser::rec_parse(&self.tokens[..]))","highlight_start":31,"highlight_end":66}],"label":"expected enum `Expr`, found struct `Box`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Expr<'a>`\n found struct `Box<Expr<'_>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider unboxing the value","code":null,"level":"help","spans":[{"file_name":"src\\parser.rs","byte_start":396,"byte_end":396,"line_start":14,"line_end":14,"column_start":31,"column_end":31,"is_primary":true,"text":[{"text":"        self.expressions.push(Parser::rec_parse(&self.tokens[..]))","highlight_start":31,"highlight_end":31}],"label":null,"suggested_replacement":"*","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"try wrapping the expression in a variant of `Expr`","code":null,"level":"help","spans":[{"file_name":"src\\parser.rs","byte_start":396,"byte_end":396,"line_start":14,"line_end":14,"column_start":31,"column_end":31,"is_primary":true,"text":[{"text":"        self.expressions.push(Parser::rec_parse(&self.tokens[..]))","highlight_start":31,"highlight_end":31}],"label":null,"suggested_replacement":"expr::Expr::Grouping(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\parser.rs","byte_start":431,"byte_end":431,"line_start":14,"line_end":14,"column_start":66,"column_end":66,"is_primary":true,"text":[{"text":"        self.expressions.push(Parser::rec_parse(&self.tokens[..]))","highlight_start":66,"highlight_end":66}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\parser.rs","byte_start":396,"byte_end":396,"line_start":14,"line_end":14,"column_start":31,"column_end":31,"is_primary":true,"text":[{"text":"        self.expressions.push(Parser::rec_parse(&self.tokens[..]))","highlight_start":31,"highlight_end":31}],"label":null,"suggested_replacement":"expr::Expr::Expression(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\parser.rs","byte_start":431,"byte_end":431,"line_start":14,"line_end":14,"column_start":66,"column_end":66,"is_primary":true,"text":[{"text":"        self.expressions.push(Parser::rec_parse(&self.tokens[..]))","highlight_start":66,"highlight_end":66}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser.rs:14:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        self.expressions.push(Parser::rec_parse(&self.tokens[..]))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `Expr`, found struct `Box`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected enum `Expr<\u001b[0m\u001b[0m\u001b[1m'a\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m            found struct `\u001b[0m\u001b[0m\u001b[1mBox<\u001b[0m\u001b[0mExpr<\u001b[0m\u001b[0m\u001b[1m'_\u001b[0m\u001b[0m>\u001b[0m\u001b[0m\u001b[1m>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider unboxing the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        self.expressions.push(\u001b[0m\u001b[0m\u001b[38;5;10m*\u001b[0m\u001b[0mParser::rec_parse(&self.tokens[..]))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try wrapping the expression in a variant of `Expr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        self.expressions.push(\u001b[0m\u001b[0m\u001b[38;5;10mexpr::Expr::Grouping(\u001b[0m\u001b[0mParser::rec_parse(&self.tokens[..])\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        self.expressions.push(\u001b[0m\u001b[0m\u001b[38;5;10mexpr::Expr::Expression(\u001b[0m\u001b[0mParser::rec_parse(&self.tokens[..])\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
